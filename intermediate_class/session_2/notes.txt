#################################
# Notes
#################################

1. Functions: encapsulate blocks of code for readability and reuseability

    a. any number of parameters and return values
           def my_func_1():
               print 'my_func_1'
               # implicitly returns None

           def my_func_2(first_arg):
               print 'my_func_2 has one argument: %s' % first_arg
               return 'something'

           def my_func_3(first_arg, second_arg=12345):
               print 'my_func_2 has two arguments: %s and %s' % (first_arg, second_arg)
               return first_arg + str(second_arg)

           def my_func_4(*args):
               for i, arg in enumerate(args):
                   print 'Argument %s is %s' % (i, arg)

    b. required/positional, keyword, default, variable length arguments
           i.   required/positional: function arguments that do not have default values
           ii.  keyword: when calling a funtion and naming the argument
                    my_func_2(first_arg='hi')
           iii. default: function arguments that have a default value
           iv.  variable length arguments: a function that accept any number of args

    c. be careful with mutable default parameters - parameters are initialized
       only once per program
           def tricky(input_list=[])
               input_list.append(12345)
               return input_list
           tricky()  # returns [12345]
           tricky()  # returns [12345, 12345]
           # instead of the above, set input_list to None and not []
           # then check for None in the function

    d. by reference, by value: when you pass in a mutable type, such as a list or
       dictionary, into a function that function can change the contents of that
       list or dictionary - this is called by-reference.

    e. *args and **kwargs: any number of function arguments. *args shown above.
       **kwargs is for named arguments:
           def f(**kwargs):
               for k, v in kwargs.iteritems():
                   print k, v
           f(1234)    # this will fail because f only accepts named arguments
           f(i=1234)  # this will work and 'i 1234' will be printed

    f. global vs local scope: python is function/class scoped. Variables assigned
       ouside of a function or class will be considered global. Variables
       assigned inside of a function or class will only be alive inside that
       function or class.

    g. nested functions: you can create functions inside of functions. Limited
       use cases for this.
           def func_1():
               def func_2():
                   def func_3():
                       print '3'
                   print '2'
                   func_3()
               print '1'
               func_2()
           func_1()  # will print 1 2 3

    h. passing functions: you can pass a function into another function
           def outer_func(input_func):
               print 'calling provided function'
               input_func()
           def func_to_be_called():
               print 'called function here'
           outer_func(func_to_be_called)


2. Classes: blueprints for objects; for readability and reuseability

    a. class vs object: the class is hte blueprint, the object is the house

    b. constructor: function which is called when object is created: __init__
           class MyClass(object):
               def __init__(self):
                   print 'I will be called when an object of this class is created'

    c. data member and function: classes can contain variables and functions
           class MyClass(object):
               def __init__(self):
                   print 'I will be called when an object of this class is created'
                   self.var_1 = 123
               def function_1(self):
                   print 'I belong to MyClass'

    d. self: identifier that all functions inside of a class must have if you want
       that function to apply to objects of that class. See function_1 above.

    e. class variable, instance variable: Classes can have a variable that is shared
       across all objects or variables that are unique to each object
           class MyClass(object):
               class_var = 'shared'
               def __init__(self):
                   print 'I will be called when an object of this class is created'
                   self.var_1 = 123
                   self.instance_var = 'unique'
               def function_1(self):
                   print 'I belong to MyClass'

    f. inheritance: one class can be absorb or inherit the properties of another
           class MyClass(object):
               def __init__(self):
                   print 'I will be called when an object of this class is created'
                   self.var_1 = 123
               def function_1(self):
                   print 'I belong to MyClass'
           class AnotherClass(MyClass):
               # I have everything that MyClass has

    g. no public vs private: python does not enforce public vs private variables
       or functions in classes. However, there is a standard style that should
       be used when you want to tell a user of your class that something should
       be considered private: prefix the variable or function name with an
       underscore:
           class MyClass(object):
               def __init__(self):
                   print 'I will be called when an object of this class is created'
                   self.var_1 = 123
                   self._dont_use_me = 'Im private'
               def function_1(self):
                   print 'I belong to MyClass'
               def _my_pri_func(self):
                   print 'only other functions in my class should call me'
